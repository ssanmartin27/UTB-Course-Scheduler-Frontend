{"ast":null,"code":"'use strict';\n\nconst config = require('./config');\nconst {\n  bannerRequest,\n  batchRequest\n} = require('./private');\n\n/**\n * @exports\n */\nmodule.exports = {\n  async getTerms() {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let res = await bannerRequest(this.School, 'getTerms', {\n      offset: offset,\n      max: max\n    });\n    return res.Body;\n  },\n  async getSubjects(term) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    if (!term) {\n      throw new Error('Must provide term');\n    }\n    let res = await bannerRequest(this.School, 'get_subject', {\n      offset: offset,\n      max: max,\n      term: term\n    });\n    return res.Body;\n  },\n  async getInstructors(term) {\n    if (!term) {\n      throw new Error('Must provide term');\n    }\n    let instructors = [];\n    let results = -1;\n    let batch = 0;\n    do {\n      results = await batchRequest(config.global.batchSizes.instructors, config.global.pageSizes.instructors, batch, {\n        term: term\n      }, 'get_instructor', this.School);\n      instructors.push(...results);\n      batch++;\n    } while (instructors.length > 0 && results.length === config.global.batchSizes.instructors);\n    return instructors;\n  },\n  async getCampuses() {\n    let res = await bannerRequest(this.School, 'get_campus');\n    return res.Body;\n  },\n  async getColleges() {\n    let res = await bannerRequest(this.School, 'get_college');\n    return res.Body;\n  },\n  async getAttributes() {\n    let res = await bannerRequest(this.School, 'get_attribute');\n    return res.Body;\n  },\n  async getSessions() {\n    let res = await bannerRequest(this.School, 'get_session');\n    return res.Body;\n  },\n  async getPartsOfTerm() {\n    let res = await bannerRequest(this.School, 'get_partOfTerm');\n    return res.Body;\n  },\n  async getInstructionalMethods() {\n    let res = await bannerRequest(this.School, 'get_instructionalMethod');\n    return res.Body;\n  },\n  async getCourseDescription(term, crn) {\n    if (arguments.length < 2) {\n      throw new Error('Must provide term and CRN');\n    }\n    let res = await bannerRequest(this.School, 'getCourseDescription', {\n      term: term,\n      courseReferenceNumber: crn\n    });\n    return res.Body.slice(4, -5); //Remove <p> tag from returned HTML\n  },\n\n  async classSearch(term, subject) {\n    let pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let openOnly = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (arguments.length < 2) {\n      throw new Error('Must provide term and subject');\n    }\n    const params = {\n      txt_subject: subject,\n      term: term,\n      txt_term: term,\n      pageOffset: offset,\n      pageMaxSize: pageSize,\n      chk_open_only: openOnly ? true : ''\n    };\n    let res = await bannerRequest(this.School, 'searchResults', params, true);\n    return res.Body;\n  },\n  async catalogSearch(term, subject) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let pageSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    if (arguments.length < 2) {\n      throw new Error('Must provide term and subject');\n    }\n    const params = {\n      txt_subject: subject,\n      txt_term: term,\n      term: term,\n      pageOffset: offset,\n      pageMaxSize: pageSize\n    };\n    let res = await bannerRequest(this.School, 'courseSearchResults', params, true);\n    return res.Body;\n  }\n};","map":{"version":3,"names":["config","require","bannerRequest","batchRequest","module","exports","getTerms","offset","arguments","length","undefined","max","res","School","Body","getSubjects","term","Error","getInstructors","instructors","results","batch","global","batchSizes","pageSizes","push","getCampuses","getColleges","getAttributes","getSessions","getPartsOfTerm","getInstructionalMethods","getCourseDescription","crn","courseReferenceNumber","slice","classSearch","subject","pageSize","openOnly","params","txt_subject","txt_term","pageOffset","pageMaxSize","chk_open_only","catalogSearch"],"sources":["C:/Users/samue/horarios/src/lib/public.js"],"sourcesContent":["'use strict';\n\n\nconst config = require('./config');\nconst{ \n    bannerRequest, \n    batchRequest \n} = require('./private');\n\n/**\n * @exports\n */\nmodule.exports = {\n    async getTerms(offset=1, max=-1){\n        let res = await bannerRequest(this.School, 'getTerms', {offset: offset, max: max});\n        return res.Body;\n    },\n\n    async getSubjects(term, offset=1, max=-1){\n        if (!term){\n            throw new Error('Must provide term');\n        }\n\n        let res = await bannerRequest(this.School, 'get_subject', {offset: offset, max: max, term: term});\n        return res.Body;\n    },\n    \n    async getInstructors(term){\n        if (!term){\n            throw new Error('Must provide term');\n        }\n        let instructors = [];\n        let results = -1;\n        let batch = 0;\n        do {\n            results = await batchRequest(config.global.batchSizes.instructors, config.global.pageSizes.instructors,\n                batch, {term: term}, 'get_instructor', this.School);\n            instructors.push(...results);\n            batch++;\n        } while (instructors.length > 0 && results.length === config.global.batchSizes.instructors);\n        \n        return instructors;\n    },\n    \n    async getCampuses(){         \n        let res = await bannerRequest(this.School, 'get_campus');\n        return res.Body;\n    },\n    \n    async getColleges(){\n        let res = await bannerRequest(this.School, 'get_college');\n        return res.Body;\n    },\n    \n    async getAttributes(){           \n        let res = await bannerRequest(this.School, 'get_attribute');\n        return res.Body;\n    },\n\n    async getSessions(){\n        let res = await bannerRequest(this.School, 'get_session');\n        return res.Body;\n    },\n\n    async getPartsOfTerm(){\n        let res = await bannerRequest(this.School, 'get_partOfTerm');\n        return res.Body;\n    },\n\n    async getInstructionalMethods(){\n        let res = await bannerRequest(this.School, 'get_instructionalMethod');\n        return res.Body;\n    },\n\n    async getCourseDescription(term, crn){\n        if (arguments.length < 2){\n            throw new Error('Must provide term and CRN');\n        }\n        let res = await bannerRequest(this.School, 'getCourseDescription', {term: term, courseReferenceNumber: crn});\n        return res.Body.slice(4, -5); //Remove <p> tag from returned HTML\n    },\n    \n    async classSearch(term, subject, pageSize=-1, offset=0, openOnly=false){\n        if (arguments.length < 2){\n            throw new Error('Must provide term and subject');\n        }\n        const params = {\n            txt_subject: subject,\n            term: term,\n            txt_term: term,\n            pageOffset: offset,\n            pageMaxSize: pageSize,\n            chk_open_only: openOnly ? true : ''\n        };\n\n        let res = await bannerRequest(this.School, 'searchResults', params, true);\n        return res.Body;\n    },\n    \n    async catalogSearch(term, subject, offset=0, pageSize=-1){\n        if (arguments.length < 2){\n            throw new Error('Must provide term and subject');\n        }\n        const params = {\n            txt_subject: subject, \n            txt_term: term,\n            term: term, \n            pageOffset: offset, \n            pageMaxSize: pageSize\n        };\n        let res = await bannerRequest(this.School, 'courseSearchResults', params, true);\n        return res.Body;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}