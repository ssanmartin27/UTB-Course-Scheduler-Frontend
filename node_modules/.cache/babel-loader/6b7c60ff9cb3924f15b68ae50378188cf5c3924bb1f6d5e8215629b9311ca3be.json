{"ast":null,"code":"//const sectionsxd = sections.filter((sec) => sec.subjectCourse === \"ISCOA01A\" || sec.subjectCourse === \"ISCOA05A\" || sec.subjectCourse === \"ISCOC08A\" || sec.subjectCourse === \"ISCOZ01A\" || sec.subjectCourse === \"ISCOP01A\" || sec.subjectCourse === \"ISCOC11A\" || sec.subjectCourse === \"ISCOA06A\")\n\nconst backtrack = (a, k, input, solutions, credits, max_credits) => {\n  if (is_a_solution(a, k, input, credits)) {\n    //console.log(\"solution found\")\n    process_solution(a, k, input, solutions);\n  } else {\n    k = k + 1;\n    let candidates = construct_candidates(a, k, input, credits, max_credits);\n    //console.log(candidates)\n    for (const candidate of candidates) {\n      //make_move(a, k, input);\n      a.push(candidate);\n      let candidate_credits = candidate.creditHours !== null ? candidate.creditHours : candidate.creditHourHigh + candidate.creditHourLow;\n      credits += candidate_credits;\n      candidates = candidates.filter(item => item !== candidate);\n      backtrack(a, k, candidates, solutions, credits, max_credits);\n      a.pop(candidate);\n      credits -= candidate_credits;\n    }\n  }\n};\nconst is_a_solution = (a, k, input, credits) => input.length === 0 && credits >= 18;\nconst construct_candidates = (a, k, input, credits, max_credits) => {\n  if (a.length === 0) {\n    return input;\n  } else {\n    return prune(input, a[k - 2], credits, max_credits);\n  }\n};\nconst process_solution = (a, k, input, solutions) => {\n  solutions.push(JSON.parse(JSON.stringify(a)));\n};\nconst generateSchedule = input => {\n  let a = [];\n  let credits = 0;\n  let max_credits = 20;\n  let solutions = [];\n  const sections2 = JSON.parse(JSON.stringify(input));\n  backtrack(a, 0, sections2, solutions, credits, max_credits);\n  return solutions;\n};\nconst overlap = (sec1, sec2) => {\n  const days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\n  for (const meetSec1 of sec1.meetingsFaculty) {\n    for (const meetSec2 of sec2.meetingsFaculty) {\n      for (const day of days) {\n        if (meetSec1.meetingTime[day] && meetSec2.meetingTime[day]) {\n          if (meetSec1.meetingTime.beginTime <= meetSec2.meetingTime.endTime && meetSec1.meetingTime.endTime >= meetSec2.meetingTime.beginTime) {\n            return true;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return false;\n};\nconst prune = (arr, section, credits, max_credits) => {\n  return arr.filter(sec => sec.subjectCourse !== section.subjectCourse && !overlap(sec, section) && (sec.creditHours !== null ? sec.creditHours : sec.creditHourHigh + sec.creditHourLow) + credits <= max_credits);\n};\nexport default {\n  backtrack: backtrack,\n  is_a_solution: is_a_solution,\n  construct_candidates: construct_candidates,\n  process_solution: process_solution,\n  generateSchedule: generateSchedule,\n  overlap: overlap,\n  prune: prune\n};","map":{"version":3,"names":["backtrack","a","k","input","solutions","credits","max_credits","is_a_solution","process_solution","candidates","construct_candidates","candidate","push","candidate_credits","creditHours","creditHourHigh","creditHourLow","filter","item","pop","length","prune","JSON","parse","stringify","generateSchedule","sections2","overlap","sec1","sec2","days","meetSec1","meetingsFaculty","meetSec2","day","meetingTime","beginTime","endTime","arr","section","sec","subjectCourse"],"sources":["C:/Users/samue/horarios/src/generateSchedules.js"],"sourcesContent":["//const sectionsxd = sections.filter((sec) => sec.subjectCourse === \"ISCOA01A\" || sec.subjectCourse === \"ISCOA05A\" || sec.subjectCourse === \"ISCOC08A\" || sec.subjectCourse === \"ISCOZ01A\" || sec.subjectCourse === \"ISCOP01A\" || sec.subjectCourse === \"ISCOC11A\" || sec.subjectCourse === \"ISCOA06A\")\r\n\r\nconst backtrack = (a, k, input, solutions, credits, max_credits) => {\r\n    if(is_a_solution(a, k, input, credits)) {\r\n      //console.log(\"solution found\")\r\n      process_solution(a, k, input, solutions);\r\n    } else {\r\n      k = k + 1;\r\n      let candidates = construct_candidates(a, k, input, credits, max_credits)\r\n      //console.log(candidates)\r\n      for (const candidate of candidates) {\r\n        //make_move(a, k, input);\r\n        a.push(candidate)\r\n        let candidate_credits = (candidate.creditHours !== null ? candidate.creditHours : (candidate.creditHourHigh + \r\n          candidate.creditHourLow))\r\n        credits += candidate_credits\r\n        candidates = candidates.filter(item => item !== candidate)\r\n        backtrack(a, k, candidates, solutions, credits, max_credits);\r\n        a.pop(candidate)\r\n        credits -= candidate_credits\r\n        \r\n      }\r\n    }\r\n  } \r\n\r\n  const is_a_solution = (a, k, input, credits) => (\r\n    (input.length === 0) && (credits >= 18)\r\n    );\r\n\r\n  const construct_candidates = (a, k, input, credits, max_credits) => {\r\n    if (a.length === 0) {\r\n      return input\r\n    }\r\n    else {\r\n      return prune(input, a[k-2], credits, max_credits)\r\n    }\r\n  }  \r\n\r\n  const process_solution = (a, k, input, solutions) => {\r\n    solutions.push(JSON.parse(JSON.stringify(a)))\r\n    }\r\n\r\n  const generateSchedule = (input) => {\r\n    let a = []\r\n    let credits = 0\r\n    let max_credits = 20\r\n    let solutions = []\r\n    const sections2 = JSON.parse(JSON.stringify(input));\r\n    backtrack(a, 0, sections2, solutions, credits, max_credits)\r\n    return solutions;\r\n  } \r\n\r\n  const overlap = (sec1, sec2) => {\r\n    const days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\r\n    for (const meetSec1 of sec1.meetingsFaculty) {\r\n      for (const meetSec2 of sec2.meetingsFaculty) {\r\n        for (const day of days) {\r\n          if (meetSec1.meetingTime[day] && meetSec2.meetingTime[day]) {\r\n            if (meetSec1.meetingTime.beginTime <= meetSec2.meetingTime.endTime\r\n              && meetSec1.meetingTime.endTime >= meetSec2.meetingTime.beginTime) {\r\n                return true\r\n              }\r\n            break  \r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  \r\n\r\n  const prune = (arr, section, credits, max_credits) => {\r\n    return(\r\n    arr.filter((sec) => (sec.subjectCourse !== section.subjectCourse) &&\r\n    !overlap(sec, section) && (((sec.creditHours !== null ? sec.creditHours : (sec.creditHourHigh + \r\n      sec.creditHourLow)) + credits) <= max_credits)\r\n    ))}\r\n\r\nexport default {\r\n    backtrack: backtrack,\r\n    is_a_solution : is_a_solution,\r\n    construct_candidates: construct_candidates,\r\n    process_solution: process_solution,\r\n    generateSchedule: generateSchedule,\r\n    overlap: overlap,\r\n    prune: prune \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}